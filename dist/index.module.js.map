{"version":3,"file":"index.module.js","sources":["../src/apis.ts","../src/providers/ProductHomeProvider.tsx","../src/utils.ts","../src/hooks/useFeature.ts","../src/hooks/useEvents.ts"],"sourcesContent":["import {AnalyticsRequest, IdentityAnalyticsRequest, ProductHouseFeature} from \"./Types\";\n\nconst baseUrl = \"https://product-server-chc1.onrender.com\"\n\n// todo neeed to handle no internet connection - queue?\nexport const postEvent = async (event: AnalyticsRequest) => {\n\n    const url = baseUrl + \"/v1/api/e\";\n    try {\n        await fetch(url, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(event)\n        });\n        // const result = await response.json();\n        // setResponse(result);\n    } catch (error) {\n        console.error(\"here\", error)\n        // setError(error.toString());\n        console.warn(\"Failed to send event\", error)\n    }\n\n}\nexport const postIdentity = async (event: IdentityAnalyticsRequest) => {\n\n    const url = baseUrl + \"/v1/api/i\";\n    try {\n        await fetch(url, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(event)\n        });\n        // const result = await response.json();\n        // setResponse(result);\n    } catch (error) {\n        console.error(\"here\", error)\n        // setError(error.toString());\n        console.warn(\"Failed to send event\", error)\n    }\n\n}\n\n\nexport const getFeatures = (): ProductHouseFeature[] => {\n    // add queryParam with base 64 context - key,user etc.\n    return []\n}\n","// MyProvider.tsx\nimport React, {createContext, ReactNode, useState} from 'react';\nimport {v4 as uuidv4} from 'uuid';\nimport {postIdentity} from \"src/apis\";\nimport {EventProperties, IdentityAnalyticsRequest} from \"src/Types\";\n\ninterface MyContextProps {\n    publicKey?: string;\n    userId?: string;\n    anonymousId?: string;\n    identity?: (userId: string, properties?: EventProperties) => void;\n}\n\nexport const ProductHouseContext = createContext<MyContextProps>({});\n\n// todo need to verify origin + publicKey\ninterface ProductHomeProviderProps {\n    publicKey: string;\n    children: ReactNode;\n}\n\nlet anonymousId = \"\";\nif (localStorage.getItem(\"p_a_id\")) {\n    anonymousId = localStorage.getItem(\"p_a_id\") as string;\n} else {\n    anonymousId = uuidv4();\n    localStorage.setItem(\"p_a_id\", anonymousId);\n}\nexport const ProductHomeProvider: React.FC<ProductHomeProviderProps> = ({\n                                                                            children,\n                                                                            publicKey\n                                                                        }: ProductHomeProviderProps) => {\n    const [userId, setUserId] = useState<string>();\n\n\n    const identity = (userId: string, properties?: EventProperties) => {\n        setUserId(userId)\n        const data: IdentityAnalyticsRequest = {\n            user_id: userId,\n            properties,\n            anonymous_id: anonymousId,\n            key: publicKey as string\n        }\n        postIdentity(data)\n            .then()\n            .catch()\n    }\n\n    return (\n        <ProductHouseContext.Provider value={{publicKey, userId, identity, anonymousId}}>\n            {children}\n        </ProductHouseContext.Provider>\n    );\n};\n","\n\nexport const buildEventName = (context:string,featureName:string,resource:string,action:string)=>{\n    return `${featureName}:${resource}:${action}`\n}","import {useContext} from 'react';\nimport {ProductHouseContext} from '../providers/ProductHomeProvider';\nimport {AnalyticsRequest, EventProperties} from \"../Types\";\nimport {buildEventName} from \"../utils\";\nimport {postEvent} from \"../apis\";\n\nexport const useFeature = (featureId: string) => {\n    const {publicKey, userId, identity, anonymousId} = useContext(ProductHouseContext);\n    const featureFlag = true;\n\n    const triggerEvent = (eventId: string, properties: EventProperties) => {\n        console.log(\"triggering event\")\n        const data: AnalyticsRequest = {\n            event_id: eventId,\n            feature_id: featureId,\n            properties,\n            user_id: userId,\n            anonymous_id: anonymousId,\n            key: publicKey as string\n        }\n        postEvent(data)\n            .then()\n            .catch()\n    }\n\n    return {featureFlag, triggerEvent, buildEventName, identity};\n\n};\n\n","// useMyFeature.ts\nimport {useContext} from 'react';\nimport {ProductHouseContext} from '../providers/ProductHomeProvider';\nimport {AnalyticsRequest, EventProperties, IdentityAnalyticsRequest} from \"../Types\";\nimport {postEvent} from \"../apis\";\nimport {buildEventName} from \"../utils\";\n\nexport const useEvents = () => {\n    const {publicKey, userId, anonymousId, identity} = useContext(ProductHouseContext);\n\n    const featureFlag = false;\n    const triggerEvent = (eventId: string, properties: EventProperties, featureId?: string) => {\n\n        const data: AnalyticsRequest = {\n            event_id: eventId,\n            feature_id: featureId,\n            properties,\n            user_id: userId,\n            anonymous_id: anonymousId,\n            key: publicKey as string\n        }\n        postEvent(data)\n            .then()\n            .catch()\n    }\n\n    return {identity, triggerEvent, buildEventName};\n\n};\n\n"],"names":["baseUrl","postEvent","event","url","_temp","_catch","Promise","resolve","fetch","method","headers","body","JSON","stringify","then","error","console","warn","e","reject","ProductHouseContext","createContext","anonymousId","localStorage","getItem","uuidv4","setItem","ProductHomeProvider","_ref","children","publicKey","_useState","useState","setUserId","React","Provider","value","userId","identity","properties","_temp2","postIdentity","user_id","anonymous_id","key","buildEventName","context","featureName","resource","action","useFeature","featureId","_useContext","useContext","featureFlag","triggerEvent","eventId","log","event_id","feature_id","useEvents"],"mappings":"wLAEA,IAAMA,EAAU,2CAGHC,EAAA,SAAmBC,GAAuB,IAEnD,IAAMC,EAAMH,EAAU,YAAYI,EAAAC,EAAA,WAC9BC,OAAAA,QAAAC,QACMC,MAAML,EAAK,CACbM,OAAQ,OACRC,QAAS,CACL,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAUX,MACvBY,KAGL,WAAA,EAAA,EAAQC,SAAAA,GACLC,QAAQD,MAAM,OAAQA,GAEtBC,QAAQC,KAAK,uBAAwBF,EACxC,UAAAT,QAAAC,QAAAH,GAAAA,EAAAU,KAAAV,EAAAU,KAEL,mBAAA,EAAA,CAAC,MAAAI,UAAAZ,QAAAa,OAAAD,EAAA,CAAA,ECXYE,EAAsBC,EAA8B,CAAA,GAQ7DC,EAAc,GACdC,aAAaC,QAAQ,UACrBF,EAAcC,aAAaC,QAAQ,WAEnCF,EAAcG,IACdF,aAAaG,QAAQ,SAAUJ,IAEtB,IAAAK,EAA0D,SAAvCC,GAC4C,IAAAC,EAAQD,EAARC,SACAC,EAASF,EAATE,UAExEC,EAA4BC,IAAbC,EAASF,EAGxB,GAaA,OACIG,gBAACd,EAAoBe,SAAS,CAAAC,MAAO,CAACN,UAAAA,EAAWO,OAjBxCN,KAiBgDO,SAd5C,SAACD,EAAgBE,GAC9BN,EAAUI,GDXO,SAAUnC,GAAmC,IAElE,IAAMC,EAAMH,EAAU,YAAYwC,EAAAnC,EAC9B,WAAA,OAAAC,QAAAC,QACMC,MAAML,EAAK,CACbM,OAAQ,OACRC,QAAS,CACL,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAUX,MACvBY,KAAA,WAAA,EAGL,EAAA,SAAQC,GACLC,QAAQD,MAAM,OAAQA,GAEtBC,QAAQC,KAAK,uBAAwBF,EACxC,GAAA,OAAAT,QAAAC,QAAAiC,GAAAA,EAAA1B,KAAA0B,EAAA1B,KAAA,WAAA,QAAA,EAEL,CAAC,MAAAI,GAAA,OAAAZ,QAAAa,OAAAD,EAGD,CAAA,CCJQuB,CANuC,CACnCC,QAASL,EACTE,WAAAA,EACAI,aAAcrB,EACdsB,IAAKd,IAGJhB,OACK,OACd,EAGuEQ,YAAAA,IAC9DO,EAGb,ECnDagB,EAAiB,SAACC,EAAeC,EAAmBC,EAAgBC,GAC7E,OAAUF,EAAeC,IAAAA,EAAYC,IAAAA,CACzC,ECEaC,EAAa,SAACC,GACvB,IAAAC,EAAmDC,EAAWjC,GAAvDU,EAASsB,EAATtB,UAAWO,EAAMe,EAANf,OAAkBf,EAAW8B,EAAX9B,YAkBpC,MAAO,CAACgC,aAjBY,EAiBCC,aAfA,SAACC,EAAiBjB,GACnCvB,QAAQyC,IAAI,oBASZxD,EAR+B,CAC3ByD,SAAUF,EACVG,WAAYR,EACZZ,WAAAA,EACAG,QAASL,EACTM,aAAcrB,EACdsB,IAAKd,IAGJhB,OACK,OACd,EAEmC+B,eAAAA,EAAgBP,SAlBjBc,EAARd,SAoB9B,ECpBasB,EAAY,WACrB,IAAAR,EAAmDC,EAAWjC,GAAvDU,EAASsB,EAATtB,UAAWO,EAAMe,EAANf,OAAQf,EAAW8B,EAAX9B,YAkB1B,MAAO,CAACgB,SAlBuCc,EAARd,SAkBrBiB,aAfG,SAACC,EAAiBjB,EAA6BY,GAUhElD,EAR+B,CAC3ByD,SAAUF,EACVG,WAAYR,EACZZ,WAAAA,EACAG,QAASL,EACTM,aAAcrB,EACdsB,IAAKd,IAGJhB,cAET,EAEgC+B,eAAAA,EAEpC"}