{"version":3,"file":"index.modern.js","sources":["../src/apis.ts","../src/providers/ProductHomeProvider.tsx","../src/utils.ts","../src/hooks/useFeature.ts","../src/hooks/useEvents.ts"],"sourcesContent":["import {AnalyticsRequest, IdentityAnalyticsRequest, ProductHouseFeature} from \"./Types\";\n\nconst baseUrl = \"https://product-server-chc1.onrender.com\"\n\n// todo neeed to handle no internet connection - queue?\nexport const postEvent = async (event: AnalyticsRequest) => {\n\n    const url = baseUrl + \"/v1/api/e\";\n    try {\n        await fetch(url, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(event)\n        });\n        // const result = await response.json();\n        // setResponse(result);\n    } catch (error) {\n        console.error(\"here\", error)\n        // setError(error.toString());\n        console.warn(\"Failed to send event\", error)\n    }\n\n}\nexport const postIdentity = async (event: IdentityAnalyticsRequest) => {\n\n    const url = baseUrl + \"/v1/api/i\";\n    try {\n        await fetch(url, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(event)\n        });\n        // const result = await response.json();\n        // setResponse(result);\n    } catch (error) {\n        console.error(\"here\", error)\n        // setError(error.toString());\n        console.warn(\"Failed to send event\", error)\n    }\n\n}\n\n\nexport const getFeatures = (): ProductHouseFeature[] => {\n    // add queryParam with base 64 context - key,user etc.\n    return []\n}\n","// MyProvider.tsx\nimport React, {createContext, ReactNode, useState} from 'react';\nimport {v4 as uuidv4} from 'uuid';\nimport {postIdentity} from \"src/apis\";\nimport {EventProperties, IdentityAnalyticsRequest} from \"src/Types\";\n\ninterface MyContextProps {\n    publicKey?: string;\n    userId?: string;\n    anonymousId?: string;\n    identity?: (userId: string, properties?: EventProperties) => void;\n}\n\nexport const ProductHouseContext = createContext<MyContextProps>({});\n\n// todo need to verify origin + publicKey\ninterface ProductHomeProviderProps {\n    publicKey: string;\n    children: ReactNode;\n}\n\nlet anonymousId = \"\";\nif (localStorage.getItem(\"p_a_id\")) {\n    anonymousId = localStorage.getItem(\"p_a_id\") as string;\n} else {\n    anonymousId = uuidv4();\n    localStorage.setItem(\"p_a_id\", anonymousId);\n}\nexport const ProductHomeProvider: React.FC<ProductHomeProviderProps> = ({\n                                                                            children,\n                                                                            publicKey\n                                                                        }: ProductHomeProviderProps) => {\n    const [userId, setUserId] = useState<string>();\n\n\n    const identity = (userId: string, properties?: EventProperties) => {\n        setUserId(userId)\n        const data: IdentityAnalyticsRequest = {\n            user_id: userId,\n            properties,\n            anonymous_id: anonymousId,\n            key: publicKey as string\n        }\n        postIdentity(data)\n            .then()\n            .catch()\n    }\n\n    return (\n        <ProductHouseContext.Provider value={{publicKey, userId, identity, anonymousId}}>\n            {children}\n        </ProductHouseContext.Provider>\n    );\n};\n","\n\nexport const buildEventName = (context:string,featureName:string,resource:string,action:string)=>{\n    return `${featureName}:${resource}:${action}`\n}","import {useContext} from 'react';\nimport {ProductHouseContext} from '../providers/ProductHomeProvider';\nimport {AnalyticsRequest, EventProperties} from \"../Types\";\nimport {buildEventName} from \"../utils\";\nimport {postEvent} from \"../apis\";\n\nexport const useFeature = (featureId: string) => {\n    const {publicKey, userId, identity, anonymousId} = useContext(ProductHouseContext);\n    const featureFlag = true;\n\n    const triggerEvent = (eventId: string, properties: EventProperties) => {\n        console.log(\"triggering event\")\n        const data: AnalyticsRequest = {\n            event_id: eventId,\n            feature_id: featureId,\n            properties,\n            user_id: userId,\n            anonymous_id: anonymousId,\n            key: publicKey as string\n        }\n        postEvent(data)\n            .then()\n            .catch()\n    }\n\n    return {featureFlag, triggerEvent, buildEventName, identity};\n\n};\n\n","// useMyFeature.ts\nimport {useContext} from 'react';\nimport {ProductHouseContext} from '../providers/ProductHomeProvider';\nimport {AnalyticsRequest, EventProperties, IdentityAnalyticsRequest} from \"../Types\";\nimport {postEvent} from \"../apis\";\nimport {buildEventName} from \"../utils\";\n\nexport const useEvents = () => {\n    const {publicKey, userId, anonymousId, identity} = useContext(ProductHouseContext);\n\n    const featureFlag = false;\n    const triggerEvent = (eventId: string, properties: EventProperties, featureId?: string) => {\n\n        const data: AnalyticsRequest = {\n            event_id: eventId,\n            feature_id: featureId,\n            properties,\n            user_id: userId,\n            anonymous_id: anonymousId,\n            key: publicKey as string\n        }\n        postEvent(data)\n            .then()\n            .catch()\n    }\n\n    return {identity, triggerEvent, buildEventName};\n\n};\n\n"],"names":["baseUrl","postEvent","async","url","fetch","method","headers","body","JSON","stringify","event","error","console","warn","ProductHouseContext","createContext","anonymousId","localStorage","getItem","uuidv4","setItem","ProductHomeProvider","children","publicKey","userId","setUserId","useState","React","Provider","value","identity","properties","postIdentity","user_id","anonymous_id","key","then","catch","buildEventName","context","featureName","resource","action","useFeature","featureId","useContext","featureFlag","triggerEvent","eventId","log","event_id","feature_id","useEvents"],"mappings":"iGAEA,MAAMA,EAAU,2CAGHC,EAAYC,UAErB,MAAMC,EAAMH,EAAU,YACtB,UACUI,MAAMD,EAAK,CACbE,OAAQ,OACRC,QAAS,CACL,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAUC,IAI5B,CAAC,MAAOC,GACLC,QAAQD,MAAM,OAAQA,GAEtBC,QAAQC,KAAK,uBAAwBF,EACxC,GCTQG,EAAsBC,EAA8B,CAAE,GAQnE,IAAIC,EAAc,GACdC,aAAaC,QAAQ,UACrBF,EAAcC,aAAaC,QAAQ,WAEnCF,EAAcG,IACdF,aAAaG,QAAQ,SAAUJ,IAEtB,MAAAK,EAA0DA,EACKC,WACAC,gBAExE,MAAOC,EAAQC,GAAaC,IAgB5B,OACIC,gBAACb,EAAoBc,SAAS,CAAAC,MAAO,CAACN,YAAWC,SAAQM,SAd5CA,CAACN,EAAgBO,KAC9BN,EAAUD,GDXUtB,WAExB,MAAMC,EAAMH,EAAU,YACtB,UACUI,MAAMD,EAAK,CACbE,OAAQ,OACRC,QAAS,CACL,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAUC,IAI5B,CAAC,MAAOC,GACLC,QAAQD,MAAM,OAAQA,GAEtBC,QAAQC,KAAK,uBAAwBF,EACxC,GCCGqB,CANuC,CACnCC,QAAST,EACTO,aACAG,aAAclB,EACdmB,IAAKZ,IAGJa,OACAC,OACT,EAGuErB,gBAC9DM,EAAQ,EChDRgB,EAAiBA,CAACC,EAAeC,EAAmBC,EAAgBC,IACtE,GAAGF,KAAeC,KAAYC,ICG5BC,EAAcC,IACvB,MAAMrB,UAACA,EAASC,OAAEA,EAAMM,SAAEA,EAAQd,YAAEA,GAAe6B,EAAW/B,GAkB9D,MAAO,CAACgC,aAjBY,EAiBCC,aAfAA,CAACC,EAAiBjB,KACnCnB,QAAQqC,IAAI,oBASZhD,EAR+B,CAC3BiD,SAAUF,EACVG,WAAYP,EACZb,aACAE,QAAST,EACTU,aAAclB,EACdmB,IAAKZ,IAGJa,OACAC,OACT,EAEmCC,iBAAgBR,WAAQ,EClBlDsB,EAAYA,KACrB,MAAM7B,UAACA,EAASC,OAAEA,EAAMR,YAAEA,EAAWc,SAAEA,GAAYe,EAAW/B,GAkB9D,MAAO,CAACgB,WAAUiB,aAfGA,CAACC,EAAiBjB,EAA6Ba,KAUhE3C,EAR+B,CAC3BiD,SAAUF,EACVG,WAAYP,EACZb,aACAE,QAAST,EACTU,aAAclB,EACdmB,IAAKZ,IAGJa,OACAC,OAAK,EAGkBC"}